// MIT License
//
// Copyright (c) 2018 SpiralScout
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package php

import (
	"bytes"
	"fmt"
	"strings"
	"text/template"

	"github.com/golang/protobuf/protoc-gen-go/descriptor"
	plugin "github.com/golang/protobuf/protoc-gen-go/plugin"
)

var method_tpl *template.Template

func init() {
	method_tpl = template.Must(template.New("phpBody").Funcs(template.FuncMap{
		"interface": func(name *string) string {
			return identifier(*name, "MethodInterface")
		},
		"name": func(ns *ns, name *string) string {
			return ns.resolve(name)
		},
	}).Parse(`<?php
# Generated by the protocol buffer compiler (spiral/php-grpc). DO NOT EDIT!
# source: {{ .File.Name }}
# method: {{ .Method.Name }}
{{ $ns := .Namespace -}}
{{if $ns.Namespace}}
namespace {{ $ns.Namespace }};
{{end}}
use Spiral\GRPC;
{{- range $n := $ns.Import}}
use {{ $n }};
{{- end}}

interface {{ .Method.Name | interface }} extends GRPC\MethodInterface
{
    // GRPC specific service and method name.
    public const NAME = "{{ .File.Package }}.{{ .Service.Name }}/{{ .Method.Name }}";

    /**
     * @param GRPC\ContextInterface $ctx
     * @param {{ name $ns .Method.InputType }} $in
     * @return {{ name $ns .Method.OutputType }}
     *
     * @throws GRPC\Exception\InvokeException
     */
    public function __invoke(GRPC\ContextInterface $ctx, {{ name $ns .Method.InputType }} $in): {{ name $ns .Method.OutputType }};
}
`))
}

// generate php filename
func methodInterfaceFilename(file *descriptor.FileDescriptorProto, methodName *string) string {
	ns := namespace(file.Package, "/")
	if file.Options != nil && file.Options.PhpNamespace != nil {
		ns = strings.Replace(*file.Options.PhpNamespace, `\`, `/`, -1)
	}

	return fmt.Sprintf("%s/%s.php", ns, identifier(*methodName, "MethodInterface"))
}

// generate php file body
func methodInterfaceBody(
	req *plugin.CodeGeneratorRequest,
	file *descriptor.FileDescriptorProto,
	service *descriptor.ServiceDescriptorProto,
	method *descriptor.MethodDescriptorProto,
) string {
	out := bytes.NewBuffer(nil)

	data := struct {
		Namespace *ns
		File      *descriptor.FileDescriptorProto
		Service   *descriptor.ServiceDescriptorProto
		Method    *descriptor.MethodDescriptorProto
	}{
		Namespace: newNamespace(req, file, service),
		File:      file,
		Service:   service,
		Method:   method,
	}

	err := method_tpl.Execute(out, data)
	if err != nil {
		panic(err)
	}

	return out.String()
}
